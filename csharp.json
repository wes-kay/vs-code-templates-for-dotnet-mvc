{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"MVCController": {
		"prefix": "controller",
		"body": [
		"using Zenject;",
		"",
		"public interface I${1:Controller}Controller",
		"{",
		"void Initialize();",
		"void SetVisable(bool v);",
		"void Tick();",
		"void Dispose();",
		"}",
		"",
		"public class ${1:Controller}Controller : I${1:Controller}Controller",
		"{",
		"    I${1:Controller}Model model;",
		"",
		"    [Inject]",
		"    public void Construct(I${1:Model}Model model) => this.model = model;",
		"",
		"    public void Initialize()",
		"    {",
		"        throw new System.NotImplementedException();",
		"    }",
		"",
		"    public void SetVisable(bool v) => model.IsEnabled = v;",
		"",
		"    public void Tick()",
		"    {",
		"         throw new System.NotImplementedException();",
		"    }",
		"",
		"    public void Dispose()",
		"    {",
		"         throw new System.NotImplementedException();",
		"    }",
		"}"
		],
		"description": "Zenject Controller template"
		},
		"MVCView": {
		"prefix": "view",
		"body": [
			"using UnityEngine;",
			"using Zenject;",
			"",
			"public class ${1:View}View : MonoBehaviour",
			"{",
			"    I${1:Model}Model model;",
			"",
			"	 [Inject]",
			"    public void Construct(I${1:Model}Model model)",
			"    {",
			"        this.model = model;",
			"    }",
			"",
			"    public void Start()",
			"    {",
			"		if (model != null)",
			"		{",
			"			model.OnIsEnabledChanged += OnIsEnabledChanged;",
			"			model.OnIsDirtyChanged += OnIsDirtyChanged;",
			"		}",
			"    }",
			"",
			"    public void OnDestroy()",
			"    {",
			"		if (model != null)",
			"		{",
			"			model.OnIsEnabledChanged -= OnIsEnabledChanged;",
			"			model.OnIsDirtyChanged -= OnIsDirtyChanged;",
			"		}",
			"    }",
			"",
			"	 void OnIsEnabledChanged(bool newIsEnabled)",
			"	 {",
			"	 	gameObject.SetActive(newIsEnabled);",
			"	 }",
			"",
			"	 void OnIsDirtyChanged(bool newIsDirty)",
			"	 {",
			"	 	throw new System.NotImplementedException();",
			"	 }",
			"}"
		],
		"description": "Zenject View template"
		},
		"MVCModel": {
			"prefix": "model",
			"body": [
			  "using System;",
			  "",
			"  public interface I${1:Model}Model",
			"	{",
			"		bool IsEnabled { get; set; }",
			"		bool IsDirty { get; set; }",
			"		Action<bool> OnIsEnabledChanged { get; set; }",
			"		Action<bool> OnIsDirtyChanged { get; set; }",
			"		void Save();",
			"		void Load();",
			"	}",
			"",
			  "public class ${1:Model}Model : I${1:Model}Model",
			  "{",
			  "private bool isEnabled;",
			  "public bool IsEnabled",
			  "{",
			  "    get { return isEnabled; }",
			  "    set",
			  "    {",
			  "        if (isEnabled != value)",
			  "        {",
			  "            isEnabled = value;",
			  "            OnIsEnabledChanged?.Invoke(isEnabled);",
			  "        }",
			  "    }",
			  "}",
			  "",
			  "private bool isDirty;",
			  "public bool IsDirty",
			  "{",
			  "    get { return isDirty; }",
			  "    set",
			  "    {",
			  "        if (isDirty != value)",
			  "        {",
			  "            isDirty = value;",
			  "            OnIsDirtyChanged?.Invoke(isDirty);",
			  "        }",
			  "    }",
			  "}",
			  "",
			  "public Action<bool> OnIsEnabledChanged {get;set;}",
			  "public Action<bool> OnIsDirtyChanged{get;set;}",
			  "",
			  "public void Save()",
			  "{",
			  "    if (IsDirty)",
			  "    {",
			  "        IsDirty = false;",
			  "    }",
			  "}",
			  "",
			  "public void Load()",
			  "{",
			  "    throw new NotImplementedException();",
			  "}"
			  "}"
			],
			"description": "Zenject Model template"
		  }
}

